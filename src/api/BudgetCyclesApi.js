/**
 * NGDL API
 *  This is the API document for the NGDL project. It is a work in progress and is subject to change. This documentation is provided for the purpose of testing and auditing the integrity of the platform. It is not intended for production use.<br/><br/> The API is currently in version <b>1.0.0</b>.<br/> Developed by: <b>The Boolean Technology Ltd.</b><br/> Developed for: <b>Nehemiah Grace Developer Limited</b><br/> 
 *
 * The version of the OpenAPI document: v1
 * Contact: tobisholanke@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BudgetCycle from '../model/BudgetCycle';
import BudgetCyclesList200Response from '../model/BudgetCyclesList200Response';

/**
* BudgetCycles service.
* @module api/BudgetCyclesApi
* @version v1
*/
export default class BudgetCyclesApi {

    /**
    * Constructs a new BudgetCyclesApi. 
    * @alias module:api/BudgetCyclesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the budgetCyclesCreate operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCycle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BudgetCycle} data 
     * @param {module:api/BudgetCyclesApi~budgetCyclesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCycle}
     */
    budgetCyclesCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling budgetCyclesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BudgetCycle;
      return this.apiClient.callApi(
        '/budget_cycles/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesDelete operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this budget cycle.
     * @param {module:api/BudgetCyclesApi~budgetCyclesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    budgetCyclesDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling budgetCyclesDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/budget_cycles/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesGetBudgets operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesGetBudgetsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this budget cycle.
     * @param {module:api/BudgetCyclesApi~budgetCyclesGetBudgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    budgetCyclesGetBudgets(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling budgetCyclesGetBudgets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/budget_cycles/{id}/get_budgets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesList operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCyclesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/BudgetCyclesApi~budgetCyclesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCyclesList200Response}
     */
    budgetCyclesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BudgetCyclesList200Response;
      return this.apiClient.callApi(
        '/budget_cycles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesPartialUpdate operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCycle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this budget cycle.
     * @param {module:model/BudgetCycle} data 
     * @param {module:api/BudgetCyclesApi~budgetCyclesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCycle}
     */
    budgetCyclesPartialUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling budgetCyclesPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling budgetCyclesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BudgetCycle;
      return this.apiClient.callApi(
        '/budget_cycles/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesRead operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCycle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this budget cycle.
     * @param {module:api/BudgetCyclesApi~budgetCyclesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCycle}
     */
    budgetCyclesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling budgetCyclesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BudgetCycle;
      return this.apiClient.callApi(
        '/budget_cycles/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCyclesUpdate operation.
     * @callback module:api/BudgetCyclesApi~budgetCyclesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCycle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this budget cycle.
     * @param {module:model/BudgetCycle} data 
     * @param {module:api/BudgetCyclesApi~budgetCyclesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCycle}
     */
    budgetCyclesUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling budgetCyclesUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling budgetCyclesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BudgetCycle;
      return this.apiClient.callApi(
        '/budget_cycles/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
