/**
 * NGDL API
 *  This is the API document for the NGDL project. It is a work in progress and is subject to change. This documentation is provided for the purpose of testing and auditing the integrity of the platform. It is not intended for production use.<br/><br/> The API is currently in version <b>1.0.0</b>.<br/> Developed by: <b>The Boolean Technology Ltd.</b><br/> Developed for: <b>Nehemiah Grace Developer Limited</b><br/> 
 *
 * The version of the OpenAPI document: v1
 * Contact: tobisholanke@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NgdlApi);
  }
}(this, function(expect, NgdlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NgdlApi.TransactionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionsApi', function() {
    describe('transactionsAddBank', function() {
      it('should call transactionsAddBank successfully', function(done) {
        //uncomment below and update the code to test transactionsAddBank
        //instance.transactionsAddBank(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsApprove', function() {
      it('should call transactionsApprove successfully', function(done) {
        //uncomment below and update the code to test transactionsApprove
        //instance.transactionsApprove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsCreate', function() {
      it('should call transactionsCreate successfully', function(done) {
        //uncomment below and update the code to test transactionsCreate
        //instance.transactionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsDecline', function() {
      it('should call transactionsDecline successfully', function(done) {
        //uncomment below and update the code to test transactionsDecline
        //instance.transactionsDecline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsDelete', function() {
      it('should call transactionsDelete successfully', function(done) {
        //uncomment below and update the code to test transactionsDelete
        //instance.transactionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsExpenseList', function() {
      it('should call transactionsExpenseList successfully', function(done) {
        //uncomment below and update the code to test transactionsExpenseList
        //instance.transactionsExpenseList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsIncomeList', function() {
      it('should call transactionsIncomeList successfully', function(done) {
        //uncomment below and update the code to test transactionsIncomeList
        //instance.transactionsIncomeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsList', function() {
      it('should call transactionsList successfully', function(done) {
        //uncomment below and update the code to test transactionsList
        //instance.transactionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsPartialUpdate', function() {
      it('should call transactionsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test transactionsPartialUpdate
        //instance.transactionsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsPay', function() {
      it('should call transactionsPay successfully', function(done) {
        //uncomment below and update the code to test transactionsPay
        //instance.transactionsPay(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsProfitLossSummary', function() {
      it('should call transactionsProfitLossSummary successfully', function(done) {
        //uncomment below and update the code to test transactionsProfitLossSummary
        //instance.transactionsProfitLossSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsRead', function() {
      it('should call transactionsRead successfully', function(done) {
        //uncomment below and update the code to test transactionsRead
        //instance.transactionsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transactionsUpdate', function() {
      it('should call transactionsUpdate successfully', function(done) {
        //uncomment below and update the code to test transactionsUpdate
        //instance.transactionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
