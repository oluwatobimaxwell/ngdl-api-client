/**
 * NGDL API
 *  This is the API document for the NGDL project. It is a work in progress and is subject to change. This documentation is provided for the purpose of testing and auditing the integrity of the platform. It is not intended for production use.<br/><br/> The API is currently in version <b>1.0.0</b>.<br/> Developed by: <b>The Boolean Technology Ltd.</b><br/> Developed for: <b>Nehemiah Grace Developer Limited</b><br/> 
 *
 * The version of the OpenAPI document: v1
 * Contact: tobisholanke@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NgdlApi);
  }
}(this, function(expect, NgdlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NgdlApi.TrainingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TrainingsApi', function() {
    describe('trainingsApprove', function() {
      it('should call trainingsApprove successfully', function(done) {
        //uncomment below and update the code to test trainingsApprove
        //instance.trainingsApprove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsCreate', function() {
      it('should call trainingsCreate successfully', function(done) {
        //uncomment below and update the code to test trainingsCreate
        //instance.trainingsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsDecline', function() {
      it('should call trainingsDecline successfully', function(done) {
        //uncomment below and update the code to test trainingsDecline
        //instance.trainingsDecline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsDelete', function() {
      it('should call trainingsDelete successfully', function(done) {
        //uncomment below and update the code to test trainingsDelete
        //instance.trainingsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsList', function() {
      it('should call trainingsList successfully', function(done) {
        //uncomment below and update the code to test trainingsList
        //instance.trainingsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsPartialUpdate', function() {
      it('should call trainingsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test trainingsPartialUpdate
        //instance.trainingsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsRead', function() {
      it('should call trainingsRead successfully', function(done) {
        //uncomment below and update the code to test trainingsRead
        //instance.trainingsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('trainingsUpdate', function() {
      it('should call trainingsUpdate successfully', function(done) {
        //uncomment below and update the code to test trainingsUpdate
        //instance.trainingsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
